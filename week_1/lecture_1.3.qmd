---
title: "Lecture 1.3"
format: html
data: 2024-01-08
editor_options: 
  chunk_output_type: console
---


```{r}
#in order to not print (remove output under chunk udner gear)
library(tidyverse)
library(palmerpenguins)
```

## Tidy Data
```{r}
#tribble forms smaller dataframe, write it out exactly what you want it to look like  
#station id should be won col, temp should be own col. 
#each row reps more than one observation


# untidy data ----
temp_data_wide <- tribble(
  ~date, ~station1, ~station2,  ~station3,
  "2023-10-01", 30.1, 29.8,  31.2,
  "2023-11-01", 28.6, 29.1,  33.4,
  "2023-12-01", 29.9, 28.5,  32.3
)
```

### Untidy
```{r}
#make tidy, long format 
#any col that starts with station included in pivot

temp_data_long <- temp_data_wide %>%
  pivot_longer(cols = starts_with("station"),
               names_to = "station_id",
               values_to = "temp_c") 

```


### Tidy 
```{r}
#doing this makes it easier to use ggplot function 

temp_data_long <- temp_data_wide |> 
  pivot_longer(cols = starts_with("station"),
               names_to = "station_id",
               values_to = "temp_c")

#each observation is own row, single measurement in each col 

print(temp_data_long)
```


## Plot 1 
- look at strcuture (str)
- found factors (Categorical) and numeric after using str, integers as well
- year in this df is recognzied as a factor 
- use view to look at df
- unique explains factor evels, unique observtions in species col 
- look at length can wrap it wit unique (len(unique(penguins)))

```{r}
ggplot(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point()

#can also do this, piping into a ggplot, use plus sign to add layers ----
penguins %>%
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm))

#can sue na.omit to get rid of na values 
ggplot(daata = na.omit(penguins), aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point()

#in geometric layer can add data, but in this check documention, need data and mapping 
ggplot() +
  geom_point(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm))
```

```{r}
ggplot(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(color = "blue")

```

```{r}
#color by categorical variable 
#mapping color globally
ggplot(na.omit(penguins), aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point()

#can add aes(color = specis to geom_point())
```

```{r}
#mapping color locally ---- 
ggplot(na.omit(penguins), aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(aes(color = species))
```


```{r}
ggplot(na.omit(penguins), aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point() +
  geom_smooth(method = "lm") 
```


```{r}
#best fit line across entirety of dataset

ggplot(na.omit(penguins), aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(aes(color = species)) +
  geom_smooth(method = "lm") +
  scale_color_manual(values = c("darkorange", "purple", "cyan4")) #need as many colors as unique values, 3 uniq species 
```


```{r}
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, color = body_mass_g)) +
  geom_point() +
  scale_color_gradient(low = "#132b43", high = "#f7dd4c")#creates a continous range of colors 
```

## Plot 2 

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() #number of how many adelie appeared in dataset is shown 
#stat argument is identity, eery point in scatter plot is identity of that point 
#stat = count, groups by unique factor levels (species) counts all rows and plot bars where height of bar matches groups
```


Overriding geom_bar stat: 

```{r}
penguins_summary <- penguins %>%
  count(species) #groups all unique levels in species col and counts number of times it occurs

ggplot(penguins_summary, aes(x = species, y = n)) +
  geom_bar(stat = "identity") #height of bar equal to value in n col. , overriding how stat works 
```

Override default stat mapping
```{r}
ggplot(penguins, aes(x = species, y = after_stat(prop), group = 3)) + #prop, rather than applying counts, represented as proportion
  geom_bar() #groups by indivudal speicies then calculates total oersavtion for each species, for proportion keep in mind total values 
```

position adjustments 

```{r}
ggplot(penguins, aes(x = species, fill = island)) + #fill rather color, based on geom, line or point use color, want to fill it in use fill 
  geom_bar(position = position_dodge2(preserve = "single")) #stacked bar chart , #default position is stacked, if want to change this, fill creates stacked bar chart, makes bars same height and displays proportions or dodge starts as x and heights of bars is by count 
#fill 
#dodge 
#function
```

Coordinate system 
- ggplot assumes cartesian, x and y axis

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  #coord_cartesian() #same output as all other plots 
  #coord_flip() #flips x and y, good for long labels that dont fit neatly on axis +
  coord_polar()

```

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  coord_cartesian() #same output as all other plots 
  #coord_flip() #flips x and y, good for long labels that dont fit neatly on axis +
```

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  coord_flip() +  #flips x and y, good for long labels that dont fit neatly on axis 
  theme_classic() +
  theme(
    axis.title = element_text(size = 17, color = "purple") #axis title isi a text so use this 
  )

```

```{r}
#ggplot(penguins, aes(x = ))
```


Due: 
- end of class survery!! (due tonight) 
- pre course reflection! (due this saturday)
- hw 1 (due 1/20)

